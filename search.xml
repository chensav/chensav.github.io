<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Celery5.2.7版本配置详解</title>
    <url>/p/4ff9djj23a/</url>
    <content><![CDATA[<h4 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取任务队列</span><br>broker_url=<br><br><span class="hljs-comment"># 保存任务队列</span><br>result_backend=<br><br><span class="hljs-comment"># 接受内容格式</span><br>accept_content = [<span class="hljs-string">&#x27;json&#x27;</span>]<br><br><span class="hljs-comment"># 保存数据格式化方式</span><br>result_accept_content = [<span class="hljs-string">&#x27;json&#x27;</span>] <br><br><span class="hljs-comment"># 执行速率限制</span><br>task_annotations= &#123;<span class="hljs-string">&#x27;*&#x27;</span>: &#123;<span class="hljs-string">&#x27;rate_limit&#x27;</span>: <span class="hljs-string">&#x27;10/s&#x27;</span>&#125;&#125;<br><br><span class="hljs-comment"># 任务过期时间</span><br>result_expires = <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span><br><br><span class="hljs-comment"># 程序的并发数，默认是服务器的内核数目,也是命令行-c参数指定的数目</span><br>worker_concurrency = <span class="hljs-number">20</span><br><br><span class="hljs-comment"># 设置时区</span><br>timezone = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br><span class="hljs-comment"># 启动时区设置</span><br>enable_utc = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 任务路由</span><br>task_routes = &#123;<br>    <span class="hljs-string">&#x27;app.task.keyword_rank&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;queue&#x27;</span>: <span class="hljs-string">&#x27;keyword_rank&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h4><p><a href="https://docs.celeryq.dev/en/stable/userguide/configuration.html#general-settings">celery手册</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Celery</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7搭建SOCKS5代理服务器</title>
    <url>/p/fb0b7d19/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 安装依赖扩展</span><br>yum install -y gcc openldap-devel pam-devel openssl-devel<br><span class="hljs-comment"># 下载ss5包</span><br>wget http://jaist.dl.sourceforge.net/project/ss5/ss5/3.8.9-8/ss5-3.8.9-8.tar.gz<br>tar -vzx -f ss5-3.8.9-8.tar.gz<br><span class="hljs-built_in">cd</span> ss5-3.8.9/<br>./configure<br>make<br>make install<br><span class="hljs-built_in">chmod</span> a+x /etc/init.d/ss5<br></code></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><p>vim /etc/opt/ss5/ss5.conf<br>找到对应行将“#”删除，同时在“auth”一行末尾Authentication列将“-”修改为“u”，“permit”一行中的Auth列修改“-”为“u”。修改完毕后保存。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">auth    0.0.0.0/0               -               u<br>permit u	0.0.0.0/0	-	0.0.0.0/0	-	-	-	-	-	<br></code></pre></td></tr></table></figure>
<h3 id="设置用户名和密码"><a href="#设置用户名和密码" class="headerlink" title="设置用户名和密码"></a>设置用户名和密码</h3><p>vim /etc/opt/ss5/ss5.passwd<br>添加用户名和密码，格式为：用户名 密码,保存退出。</p>
<h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3><p>service ss5 restart</p>
]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
        <tag>代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 安装 JumpServer</title>
    <url>/p/fb0b7d1a/</url>
    <content><![CDATA[<h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 执行一键部署脚本</span><br>curl -sSL https://github.com/jumpserver/jumpserver/releases/download/v2.6.1/quick_start.sh | sh<br></code></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 说明</span><br><span class="hljs-comment">#### 这是项目总的配置文件, 会作为环境变量加载到各个容器中</span><br><span class="hljs-comment">#### 格式必须是 KEY=VALUE 不能有空格等</span><br><br><span class="hljs-comment"># Compose项目设置</span><br>COMPOSE_PROJECT_NAME=jms<br>COMPOSE_HTTP_TIMEOUT=3600<br>DOCKER_CLIENT_TIMEOUT=3600<br>DOCKER_SUBNET=192.168.250.0/24<br><br><span class="hljs-comment">## IPV6</span><br><span class="hljs-comment">#DOCKER_SUBNET_IPV6=2001:db8:10::/64</span><br><span class="hljs-comment">#USE_IPV6=0</span><br><br><span class="hljs-comment">### 持久化目录, 安装启动后不能再修改, 除非移动原来的持久化到新的位置</span><br>VOLUME_DIR=/opt/data/<br><br><span class="hljs-comment">## 是否使用外部MYSQL和REDIS</span><br>USE_EXTERNAL_MYSQL=1<br>USE_EXTERNAL_REDIS=1<br><br><span class="hljs-comment">## Nginx 配置，这个Nginx是用来分发路径到不同的服务</span><br>HTTP_PORT=8080<br>HTTPS_PORT=8443<br>SSH_PORT=2222<br><br><span class="hljs-comment">## LB 配置, 这个Nginx是HA时可以启动负载均衡到不同的主机</span><br>USE_LB=0<br>LB_HTTP_PORT=80<br>LB_HTTPS_PORT=443<br>LB_SSH_PORT=2223<br><br><span class="hljs-comment">## Task 配置</span><br>USE_TASK=1<br><br><span class="hljs-comment">## XPack</span><br>USE_XPACK=0<br><br><br><span class="hljs-comment"># Koko配置</span><br>CORE_HOST=http://121.5.21.20:8080<br>ENABLE_PROXY_PROTOCOL=<span class="hljs-literal">true</span><br><br><br><span class="hljs-comment"># Core 配置</span><br><span class="hljs-comment">### 启动后不能再修改，否则密码等等信息无法解密</span><br>SECRET_KEY=TEJZPgMoeXzo6ojeAuhNLE3s0r77eY1R9px129nqHVcSF9HF2<br>BOOTSTRAP_TOKEN=hank4RTz5QrYqfRW<br>LOG_LEVEL=INFO<br><span class="hljs-comment"># SESSION_COOKIE_AGE=86400</span><br><span class="hljs-comment"># SESSION_EXPIRE_AT_BROWSER_CLOSE=false</span><br><br><span class="hljs-comment">## MySQL数据库配置</span><br>DB_ENGINE=mysql<br>DB_HOST=172.17.0.7<br>DB_PORT=3306<br>DB_USER=root<br>DB_PASSWORD=7223c5a94dc4b691<br>DB_NAME=jumpserver<br><br><span class="hljs-comment">## Redis配置</span><br>REDIS_HOST=172.17.0.7<br>REDIS_PASSWORD=12345678<br><br><span class="hljs-comment">### Keycloak 配置方式</span><br><span class="hljs-comment">### AUTH_OPENID=true</span><br><span class="hljs-comment">### BASE_SITE_URL=https://jumpserver.company.com/</span><br><span class="hljs-comment">### AUTH_OPENID_SERVER_URL=https://keycloak.company.com/auth</span><br><span class="hljs-comment">### AUTH_OPENID_REALM_NAME=cmp</span><br><span class="hljs-comment">### AUTH_OPENID_CLIENT_ID=jumpserver</span><br><span class="hljs-comment">### AUTH_OPENID_CLIENT_SECRET=</span><br><span class="hljs-comment">### AUTH_OPENID_SHARE_SESSION=true</span><br><span class="hljs-comment">### AUTH_OPENID_IGNORE_SSL_VERIFICATION=true</span><br><br><br><span class="hljs-comment"># Guacamole 配置</span><br>JUMPSERVER_SERVER=http://121.5.21.20:8080<br>JUMPSERVER_KEY_DIR=/config/guacamole/data/key/<br>JUMPSERVER_RECORD_PATH=/config/guacamole/data/record/<br>JUMPSERVER_DRIVE_PATH=/config/guacamole/data/drive/<br>JUMPSERVER_ENABLE_DRIVE=<span class="hljs-literal">true</span><br>JUMPSERVER_CLEAR_DRIVE_SESSION=<span class="hljs-literal">true</span><br>JUMPSERVER_CLEAR_DRIVE_SCHEDULE=24<br><br><span class="hljs-comment"># Mysql 容器配置</span><br>MYSQL_ROOT_PASSWORD=7223c5a94dc4b691<br>MYSQL_DATABASE=jumpserver<br>REDIS_PORT=6379<br><br></code></pre></td></tr></table></figure>

<p>Mysql和 Redis 的ip要使用本机内网ip</p>
<h4 id="查看本机内网ip方法"><a href="#查看本机内网ip方法" class="headerlink" title="查看本机内网ip方法"></a>查看本机内网ip方法</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">ifconfig<br></code></pre></td></tr></table></figure>

<p><img src="https://secure2.wostatic.cn/static/iMJj5ZrK3z9KcDgXbKqp32/7cdf2452d5d775b7939f175fcf5f5cd.png?auth_key=1666262665-fgKtPwDGHCMZKG6hUq9Gie-0-85e5b9d14da85363e617548a0ddf37bf"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos安装Python3.8</title>
    <url>/p/f79433d6/</url>
    <content><![CDATA[<blockquote>
<p>新买一台服务器通常是只安装了python2.7版本的，我想安装python3.8版本，详细安装教程如下</p>
</blockquote>
<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>编译python源码的时候需要用到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make libffi-devel<br></code></pre></td></tr></table></figure>

<h4 id="下载-Python-源码包"><a href="#下载-Python-源码包" class="headerlink" title="下载 Python 源码包"></a>下载 Python 源码包</h4><blockquote>
<p>如果没有安装 wget 请先去安装  yum install wget</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget https://www.python.org/ftp/python/3.8.1/Python-3.8.1.tgz<br></code></pre></td></tr></table></figure>

<h4 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压压缩包</span><br>tar -zxvf Python-3.8.1.tgz  <br><br><span class="hljs-comment"># 配置安装位置</span><br>./configure prefix=/usr/local/python3<br><br><span class="hljs-comment"># 安装</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure>
<blockquote>
<p>如果没有报错表示安装成功</p>
</blockquote>
<h4 id="添加软链接"><a href="#添加软链接" class="headerlink" title="添加软链接"></a>添加软链接</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#添加python3的软链接 </span><br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/python3.8 /usr/bin/python3 <br><br><span class="hljs-comment">#添加 pip3 的软链接 </span><br><span class="hljs-built_in">ln</span> -s /usr/local/python3/bin/pip3.8 /usr/bin/pip3<br></code></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote>
<p>出现下面页面表示安装成功</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@iZwz9gt6l3aw8d5732xn69Z ~]<span class="hljs-comment"># python3 -V</span><br>Python 3.8.1<br>[root@iZwz9gt6l3aw8d5732xn69Z ~]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos安装supervisor</title>
    <url>/p/7e7b6c02/</url>
    <content><![CDATA[<h4 id="安装-supervisor"><a href="#安装-supervisor" class="headerlink" title="安装 supervisor"></a>安装 supervisor</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">yum install -y supervisor <br></code></pre></td></tr></table></figure>

<h4 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">systemctl <span class="hljs-built_in">enable</span> supervisord<br></code></pre></td></tr></table></figure>

<h4 id="启动-supervisor"><a href="#启动-supervisor" class="headerlink" title="启动 supervisor"></a>启动 supervisor</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">ps<br></code></pre></td></tr></table></figure>

<h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">systemctl status supervisord<br></code></pre></td></tr></table></figure>

<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">vim /etc/supervisord.conf<br></code></pre></td></tr></table></figure>

<h4 id="开启web界面访问-把-inet-http-server-模块的注释去掉，并修改IP、用户名与密码"><a href="#开启web界面访问-把-inet-http-server-模块的注释去掉，并修改IP、用户名与密码" class="headerlink" title="#开启web界面访问 把[inet_http_server]模块的注释去掉，并修改IP、用户名与密码"></a>#开启web界面访问 把[inet_http_server]模块的注释去掉，并修改IP、用户名与密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">[inet_http_server]         ; inet (TCP) server disabled by default<br>port=10.64.56.159:9001        ; (ip_address:port specifier, *:port <span class="hljs-keyword">for</span> all iface)<br>username=***              ; (default is no username (open server))<br>password=***               ; (default is no password (open server)) <br></code></pre></td></tr></table></figure>

<h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">~~supervisorctl reload~~<br></code></pre></td></tr></table></figure>

<h4 id="php-laravel-配置-Supervisor示例-修改-etc-supervisord-conf-文件内容"><a href="#php-laravel-配置-Supervisor示例-修改-etc-supervisord-conf-文件内容" class="headerlink" title="php laravel 配置 Supervisor示例 #修改 /etc/supervisord.conf 文件内容"></a>php laravel 配置 Supervisor示例 #修改 /etc/supervisord.conf 文件内容</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">; files = supervisord.d/*.ini<br>files = /etc/supervisord.d/conf.d/*.conf<br><br></code></pre></td></tr></table></figure>

<h4 id="在-etc-supervisord-d-下创建文件test-conf，内容如下："><a href="#在-etc-supervisord-d-下创建文件test-conf，内容如下：" class="headerlink" title="在 /etc/supervisord.d/下创建文件test.conf，内容如下："></a>在 /etc/supervisord.d/下创建文件test.conf，内容如下：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">[program:sync_goods_to_es]<br>process_name=%(program_name)s_%(process_num)02d<br><span class="hljs-built_in">command</span>=php artisan command.sync.goods.to.es  ;被监控的进程路径<br>priority=999 ;优先级，数值越低越先启动而越后关闭 (default 999)<br>autostart=<span class="hljs-literal">true</span> ;随着supervisord的启动而启动<br>autorestart=<span class="hljs-literal">true</span> ;自动重启<br>user=root ;用哪个用户启动进程，默认是root<br>numprocs=1 ;启动几个进程<br>redirect_stderr=<span class="hljs-literal">true</span> ;重定向stderr到stdout<br>stdout_logfile=/data0/log-data/service.log;<br><br></code></pre></td></tr></table></figure>

<p><strong>stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</strong></p>
<h4 id="执行命令使配置文件生效"><a href="#执行命令使配置文件生效" class="headerlink" title="执行命令使配置文件生效"></a>执行命令使配置文件生效</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 重新更新配置</span><br>supervisorctl reload<br>supervisorctl update <br></code></pre></td></tr></table></figure>

<h4 id="如果修改了-etc-supervisord-conf，重启-supervisord"><a href="#如果修改了-etc-supervisord-conf，重启-supervisord" class="headerlink" title="如果修改了 /etc/supervisord.conf，重启 supervisord"></a>如果修改了 /etc/supervisord.conf，重启 supervisord</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">systemctl restart supervisord<br></code></pre></td></tr></table></figure>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">systemctl start supervisord <span class="hljs-comment">#启动</span><br><br>systemctl stop supervisord <span class="hljs-comment">#停止</span><br><br>systemctl status supervisord <span class="hljs-comment">#查看状态</span><br><br>supervisorctl reread  <span class="hljs-comment"># 重新加载</span><br><br>supervisorctl update<br><br>supervisorctl reload<br><br>supervisorctl shutdown <span class="hljs-comment">#关闭所有任务</span><br><br>supervisorctl stop|start program_name <span class="hljs-comment">#启动或停止服务</span><br><br>supervisorctl status <span class="hljs-comment">#查看所有任务状态 </span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7同步时间</title>
    <url>/p/3b76e851/</url>
    <content><![CDATA[<h4 id="使用ntpdate同步时间"><a href="#使用ntpdate同步时间" class="headerlink" title="使用ntpdate同步时间"></a>使用ntpdate同步时间</h4><p>目前比较常用的做法就是使用ntpdate命令来同步时间，使用方法如下：<br>另外再分享下几个常用的ntp server，如果需要更多可以前往：<a href="http://www.ntp.org.cn获取/">http://www.ntp.org.cn获取</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#安装ntpdate</span><br>yum -y install ntpdate<br><span class="hljs-comment">#同步时间</span><br>ntpdate -u  pool.ntp.org<br><span class="hljs-comment">#同步完成后,date命令查看时间是否正确</span><br><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure>

<h4 id="使用rdate同步时间"><a href="#使用rdate同步时间" class="headerlink" title="使用rdate同步时间"></a>使用rdate同步时间</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#安装rdate</span><br>yum -y install rdate<br><span class="hljs-comment">#同步时间</span><br>rdate -s time-b.nist.gov<br><span class="hljs-comment">#同步完成后,date命令查看时间是否正确</span><br><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure>

<h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#创建crontab任务</span><br>crontab -e<br><br><span class="hljs-comment">#添加定时任务</span><br>*/20 * * * * /usr/sbin/ntpdate pool.ntp.org &gt; /dev/null 2&gt;&amp;1<br>*/20 * * * * /usr/sbin/rdate -s time-b.nist.gov &gt; /dev/null 2&gt;&amp;1<br><br><span class="hljs-comment">#重启crontab</span><br>service crond reload<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Centos</category>
      </categories>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos安装配置Docker</title>
    <url>/p/4ff9dde3/</url>
    <content><![CDATA[<h3 id="卸载旧版本的Docker"><a href="#卸载旧版本的Docker" class="headerlink" title="卸载旧版本的Docker"></a>卸载旧版本的Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br></code></pre></td></tr></table></figure>

<h3 id="使用-yum-安装Docker"><a href="#使用-yum-安装Docker" class="headerlink" title="使用 yum 安装Docker"></a>使用 yum 安装Docker</h3><h4 id="执行以下命令安装依赖包："><a href="#执行以下命令安装依赖包：" class="headerlink" title="执行以下命令安装依赖包："></a>执行以下命令安装依赖包：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">yum install -y yum-utils<br></code></pre></td></tr></table></figure>

<h4 id="yum软件源"><a href="#yum软件源" class="headerlink" title="yum软件源"></a>yum软件源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">yum-config-manager \<br>    --add-repo \<br>    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>   <br>sed -i <span class="hljs-string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo<br><br></code></pre></td></tr></table></figure>

<h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure>

<h4 id="CentOS8-额外设置"><a href="#CentOS8-额外设置" class="headerlink" title="CentOS8 额外设置"></a>CentOS8 额外设置</h4><p>由于 CentOS8 防火墙使用了 <code>nftables</code>，但 Docker 尚未支持 <code>nftables</code>， 我们可以使用如下设置使用 <code>iptables</code>：</p>
<p>更改 <code>/etc/firewalld/firewalld.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># FirewallBackend=nftables</span><br>FirewallBackend=iptables<br></code></pre></td></tr></table></figure>

<p>或者执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">firewall-cmd --permanent --zone=trusted --add-interface=docker0<br>firewall-cmd --reload<br><br></code></pre></td></tr></table></figure>

<h3 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h3><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p>
<p>若你想安装测试版的 Docker, 请从 <a href="http://test.docker.com/">test.docker.com</a> 获取脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">curl -fsSL get.docker.com -o get-docker.sh<br>sh get-docker.sh --mirror Aliyun<br><br></code></pre></td></tr></table></figure>

<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Homestead环境安装swoole问题</title>
    <url>/p/6ab1d14d/</url>
    <content><![CDATA[<h4 id="CLI-执行环境的-PHP-版本切换"><a href="#CLI-执行环境的-PHP-版本切换" class="headerlink" title="CLI 执行环境的 PHP 版本切换"></a>CLI 执行环境的 PHP 版本切换</h4><ol>
<li><p>切换 cli 运行模式默认的 PHP 版本 （选择8.0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">update-alternatives --config php<br></code></pre></td></tr></table></figure></li>
<li><p>切换 phpize 版本（选择8.0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">update-alternatives --config phpize<br></code></pre></td></tr></table></figure></li>
<li><p>切换 php-config 版本（选择8.0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">update-alternatives --config php-config<br></code></pre></td></tr></table></figure></li>
<li><p>切换 phpdbg 版本（选择8.0）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">update-alternatives --config phpdbg<br></code></pre></td></tr></table></figure></li>
</ol>
<h4 id="查看最新环境变量-（我这边用的是8-1）"><a href="#查看最新环境变量-（我这边用的是8-1）" class="headerlink" title="查看最新环境变量 （我这边用的是8.1）"></a>查看最新环境变量 （我这边用的是8.1）</h4><p>可以看到所有已经换成了8.1了<br><img src="https://image.chensav.top/blog/6ab1d14d-1.png"></p>
<h4 id="安装swoole"><a href="#安装swoole" class="headerlink" title="安装swoole"></a>安装swoole</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pecl install swoole<br><br><span class="hljs-comment"># 创建配置文件</span><br>vim /etc/php/8.1/mods-available/swoole.ini<br><br><span class="hljs-comment"># 写入配置</span><br>extension=swoole.so<br><br><span class="hljs-comment">#通过软链接启用配置</span><br><span class="hljs-built_in">ln</span> -s /etc/php/8.1/mods-available/swoole.ini /etc/php/8.1/cli/conf.d/20-swoole.ini<br></code></pre></td></tr></table></figure>

<h4 id="查看安装状态"><a href="#查看安装状态" class="headerlink" title="查看安装状态"></a>查看安装状态</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">php -m | grep swoole<br><br><span class="hljs-comment"># 有打印表示安装完成</span><br>swoole<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Homestead</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令详解</title>
    <url>/p/fe29ef0f/</url>
    <content><![CDATA[<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo init [folder]<br></code></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="new"><a href="#new" class="headerlink" title="new"></a>new</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure>

<p>新建时 layout Post layout. Use post, page, draft or whatever you want.<br>post 表示发布，page 单独一个页面 ，draft草稿</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –path</td>
<td>自定义新文章的路径</td>
</tr>
<tr>
<td>-r, –replace</td>
<td>如果存在同名文章，将其替换</td>
</tr>
<tr>
<td>-s, –slug</td>
<td>文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>比如在用 -p 时<code>hexo new page --path about/me &quot;About me&quot;</code></p>
<p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p>
<h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>可以简写为 hexo g</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d, –deploy</td>
<td>文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td>监视文件变动</td>
</tr>
<tr>
<td>-b, –bail</td>
<td>生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td>-f, –force</td>
<td>强制重新生成文件</td>
</tr>
<tr>
<td>-c, –concurrency</td>
<td>最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<h3 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h3><p>用于发布草稿</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo publish [layout] &lt;filename&gt;<br></code></pre></td></tr></table></figure>

<h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-p, –port</td>
<td>重设端口</td>
</tr>
<tr>
<td>-s, –static</td>
<td>只使用静态文件</td>
</tr>
<tr>
<td>-l, –log</td>
<td>启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>部署站点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo hexo deploy<br></code></pre></td></tr></table></figure>


<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-g, –generate</td>
<td>部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure>

<h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo clean <br></code></pre></td></tr></table></figure>
<blockquote>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
</blockquote>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>列出网站资料</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo list<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL8.0关闭log-bin功能</title>
    <url>/p/bf2717e6/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>用来记录数据发生或潜在发生更改的SQL语句，并已二进制形式保存到磁盘中，例如更改数据库表和更改内容的SQL语句都会记录到binlog里，但是对库表等内容的查询不会记录。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>当有数据写入到数据库时，还会同时把更新的SQL语句写入到对应的binlog文件里，这个文件就是上文说的binlog文件。使用mysqldump备份时，只是对一段时间的数据进行全备，但是如果备份后突然发现数据库服务器故障，这个时候就要用到binlog的日志了。</p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>开启binlog记录功能，会增加从库磁盘I/O等的压力，非必要开启，请关闭。</p>
<h4 id="查看Mysql-binlog-功能是否开启-（8-0版本默认是开启的！）"><a href="#查看Mysql-binlog-功能是否开启-（8-0版本默认是开启的！）" class="headerlink" title="查看Mysql binlog 功能是否开启 （8.0版本默认是开启的！）"></a>查看Mysql binlog 功能是否开启 （8.0版本默认是开启的！）</h4><ul>
<li>关闭状态<br>  mysql&gt; show variables like ‘log_bin’;<br>  +—————+——-+<br>  | Variable_name | Value |<br>  +—————+——-+<br>  | log_bin       | OFF   |<br>  +—————+——-+</li>
<li>开启状态<br>mysql&gt; show variables like ‘log_bin’;<br>+—————+——-+<br>| Variable_name | Value |<br>+—————+——-+<br>| log_bin       | ON   |<br>+—————+——-+</li>
</ul>
<h4 id="关闭方法"><a href="#关闭方法" class="headerlink" title="关闭方法"></a>关闭方法</h4><p>在配置文件中加入以下内容，然后重启mysql即可，请测mysql8.0.24版本有效</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">port</span>		= <span class="hljs-number">3306</span><br><span class="hljs-attr">socket</span>		= /tmp/mysql.sock<br><span class="hljs-attr">datadir</span> = /www/server/data<br>skip-log-bin<br></code></pre></td></tr></table></figure>

<h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://www.cpweb.top/993">参考</a></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql8.0</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel项目创建</title>
    <url>/p/6297bd55/</url>
    <content><![CDATA[<h3 id="安装laravel"><a href="#安装laravel" class="headerlink" title="安装laravel"></a>安装laravel</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">composer create-project laravel/laravel Laravel --prefer-dist <span class="hljs-string">&quot;8.5.*&quot;</span><br><br></code></pre></td></tr></table></figure>

<h3 id="安装-Dcat-Admin-后台"><a href="#安装-Dcat-Admin-后台" class="headerlink" title="安装 Dcat Admin 后台"></a>安装 Dcat Admin 后台</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">composer require dcat/laravel-admin:<span class="hljs-string">&quot;2.*&quot;</span> -vvv<br><br>php artisan admin:publish<br><br>php artisan admin:install<br><br></code></pre></td></tr></table></figure>

<h3 id="安装辅助工具"><a href="#安装辅助工具" class="headerlink" title="安装辅助工具"></a>安装辅助工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">composer require barryvdh/laravel-ide-helper --dev<br><br><span class="hljs-comment"># 如果只想在开发环境安装请加上 --dev</span><br>composer require <span class="hljs-string">&quot;doctrine/dbal: ~2.3&quot;</span> --dev<br><br><span class="hljs-comment"># 导出配置文件</span><br>php artisan vendor:publish --provider=<span class="hljs-string">&quot;Barryvdh\LaravelIdeHelper\IdeHelperServiceProvider&quot;</span> --tag=config<br><br><span class="hljs-comment"># 为 Facades 生成注释</span><br>php artisan ide-helper:generate <br><br><span class="hljs-comment"># 为数据模型生成注释</span><br>php artisan ide-helper:models<br><br><span class="hljs-comment"># 生成 PhpStorm Meta file</span><br>php artisan ide-helper:meta<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP常用库记录</title>
    <url>/p/aa90cab1/</url>
    <content><![CDATA[<h4 id="生成推荐邀请码"><a href="#生成推荐邀请码" class="headerlink" title="生成推荐邀请码"></a>生成推荐邀请码</h4><ul>
<li><a href="https://packagist.org/packages/hashids/hashids">hashids/hashids</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs服务后台持续运行三种方法</title>
    <url>/p/3b76e85d/</url>
    <content><![CDATA[<h3 id="使用forever"><a href="#使用forever" class="headerlink" title="使用forever"></a>使用<strong>forever</strong></h3><ol>
<li>安装 forever</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">npm install forever -g<br></code></pre></td></tr></table></figure>
<ol start="2">
<li>启动服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">service forever start<br></code></pre></td></tr></table></figure>
<ol start="3">
<li>使用 forever 启动 js 文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">forever stop index.js<br></code></pre></td></tr></table></figure>
<ol start="4">
<li>启动js文件并输出日志文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">forever start -l forever.log -o out.log -e err.log index.js<br></code></pre></td></tr></table></figure>
<ol start="5">
<li>重启js文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">forever restart index.js<br></code></pre></td></tr></table></figure>
<ol start="6">
<li>查看正在运行的进程</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">forever list<br></code></pre></td></tr></table></figure>



<h3 id="pm2是一个进程管理工具-可以用它来管理你的node进程-并查看node进程的状态-当然也支持性能监控-进程守护-负载均衡等功能"><a href="#pm2是一个进程管理工具-可以用它来管理你的node进程-并查看node进程的状态-当然也支持性能监控-进程守护-负载均衡等功能" class="headerlink" title="pm2是一个进程管理工具,可以用它来管理你的node进程,并查看node进程的状态,当然也支持性能监控,进程守护,负载均衡等功能"></a>pm2是一个进程管理工具,可以用它来管理你的node进程,并查看node进程的状态,当然也支持性能监控,进程守护,负载均衡等功能</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">npm install -g pm2<br>pm2 start app.js        // 启动<br>pm2 start app.js -i max //启动 使用所有CPU核心的集群<br>pm2 stop app.js         // 停止<br>pm2 stop all            // 停止所有<br>pm2 restart app.js      // 重启<br>pm2 restart all         // 重启所有<br>pm2 delete app.js      // 关闭<br></code></pre></td></tr></table></figure>

<h3 id="nodejs-自带node-js自带服务nohub，不需要安装别的包。"><a href="#nodejs-自带node-js自带服务nohub，不需要安装别的包。" class="headerlink" title="nodejs 自带node.js自带服务nohub，不需要安装别的包。"></a>nodejs 自带node.js自带服务nohub，不需要安装别的包。</h3><p>缺点：存在无法查询日志等问题,关闭终端后服务也就关闭了， 经测试是这样的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-built_in">nohup</span> node ***.js &amp;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>supervisor和Python多进程multiprocessing使用子进程残留问题</title>
    <url>/p/6297bd59/</url>
    <content><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>使用supervisor管理Python程序时, 当Python程序中使用multiprocessing模块,supervisor的stop和restart指令只会杀死主进程，子进程会残留下来</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>killasgroup可以说是专门适配了Python的multiprocessing模块，如果配置了stopasgroup=true，那么killasgroup也会默认为true，所以我们只需要配置stopasgroup=true即可，注意stopasgroup和killasgroup发送的信号类型不同。</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[group:telegram-monitor-py]</span><br><span class="hljs-attr">programs</span>=multiprocesstest<br><br><span class="hljs-comment"># python 监控</span><br><span class="hljs-section">[program:multiprocesstest]</span><br><span class="hljs-attr">command</span>=/usr/bin/python38 monitor.py<br><span class="hljs-attr">directory</span>=/www/wwwroot/telegram-py/src<br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">startretries</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">stdout_logfile</span>=/etc/supervisord.d/log/telegram-monitor-py.out.log<br><span class="hljs-attr">stderr_logfile</span>=/etc/supervisord.d/log/telegram-monitor-py.err.log<br><span class="hljs-attr">stdout_logfile_maxbytes</span>=<span class="hljs-number">2</span>MB<br><span class="hljs-attr">stderr_logfile_maxbytes</span>=<span class="hljs-number">2</span>MB<br><span class="hljs-attr">user</span>=root<br><span class="hljs-attr">priority</span>=<span class="hljs-number">999</span><br><span class="hljs-attr">numprocs</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">process_name</span>=%(process_num)<span class="hljs-number">02</span>d<br><span class="hljs-attr">stopsignal</span>=QUIT<br><span class="hljs-attr">stopwaitsecs</span>=<span class="hljs-number">3</span><br><span class="hljs-attr">stopasgroup</span>=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python问题</tag>
        <tag>supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Python下requests库使用socks5代理</title>
    <url>/p/3b76e853/</url>
    <content><![CDATA[<h3 id="使用socks5代理"><a href="#使用socks5代理" class="headerlink" title="使用socks5代理"></a>使用socks5代理</h3><ol>
<li>安装依赖<br>pip install requests requests[socks]</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">```Python<br>import requests<br> session = requests.session()<br>                session.proxies = &#123;<span class="hljs-string">&#x27;https&#x27;</span>: f<span class="hljs-string">&#x27;socks5://&#123;ip&#125;:&#123;port&#125;&#x27;</span>&#125;<br>                response = session.get(<span class="hljs-string">&#x27;https://httpbin.org/ip&#x27;</span>, <span class="hljs-built_in">timeout</span>=30).json()<br>                logger.info(f<span class="hljs-string">&quot;获取到代理 &#123;response&#125;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title>PM2命令使用方法总结</title>
    <url>/p/e4be183c/</url>
    <content><![CDATA[<h2 id="pm2是什么？"><a href="#pm2是什么？" class="headerlink" title="pm2是什么？"></a>pm2是什么？</h2><p>PM2是 node 进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，这里推荐一个 node 版本控制工具–<strong>nvm</strong>。</p>
<h2 id="为什么要用pm2"><a href="#为什么要用pm2" class="headerlink" title="为什么要用pm2?"></a>为什么要用pm2?</h2><p>对于线上项目，如果直接通过 <code>node app</code> 来启动，因为 node 是单线程的，所以<strong>如果报错了可能会使项目直接停止，从而导致整个服务崩溃。</strong></p>
<blockquote>
<p>一般监控 node 有几种方案：</p>
<ol>
<li> supervisor: 一般用作开发环境的使用；</li>
<li> forever: 管理多个站点，一般每个站点的访问量不大的情况，不需要监控；</li>
<li> PM2: 网站的访问量比较大，需要完整的监控页面。</li>
</ol>
</blockquote>
<h2 id="pm2优点"><a href="#pm2优点" class="headerlink" title="pm2优点"></a>pm2优点</h2><ul>
<li>  后台运行(关掉cmd窗口依然运行)</li>
<li>  0 秒停机重载，维护升级时不需要停机</li>
<li>  Linux (stable) &amp; MacOSx (stable) &amp; Windows (stable).多平台支持</li>
<li>  进程守护 (停止不稳定的进程，避免无限循环)</li>
<li>  内建负载均衡</li>
<li>  实时控制台检测</li>
<li>  提供 HTTP API等</li>
<li>  远程控制和实时的接口API ( nodejs 模块,允许和PM2进程管理器交互 )</li>
<li>  不仅仅可以启动node程序，对于一般的脚本程序同样可以</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>确保有node环境</p>
</blockquote>
<p><code>npm install -g pm2</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>pm2 start app.js</code> （如果提示找不到命令且你已安装成功，则可能你没有配置环境变量，需要自己手动配一下）</p>
<p><strong>参数说明：</strong></p>
<ul>
<li>  <code>--watch</code>：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。</li>
<li>  <code>-i --instances</code>：启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li>
<li>  <code>--ignore-watch</code>：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如<code>--ignore-watch=&quot;test node_modules &quot;</code></li>
<li>  <code>-n --name</code>：指定应用的名称。查看应用信息的时候可以用到。</li>
<li>  <code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li>
<li>  <code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li>
<li>  <code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。</li>
<li>  <code>-x</code>：用fork模式启动app.js，而不是cluster模式</li>
</ul>
<blockquote>
<ul>
<li>fork模式：单实例多进程，常用于多语言混编，比如php、python等，不支持端口复用，需要自己做应用的端口分配和负载均衡的子进程业务代码。<ul>
<li>  缺点：就是单服务器实例容易由于异常会导致服务器实例崩溃。</li>
</ul>
</li>
<li>cluster模式：多实例多进程，但是只支持node，端口可以复用，不需要额外的端口配置，0代码实现负载均衡。<ul>
<li>  优点：就是由于多实例机制，可以保证服务器的容错性，就算出现异常也不会使多个服务器实例同时崩溃。</li>
</ul>
</li>
</ul>
</blockquote>
<blockquote>
<p>例子：</p>
<ul>
<li>  <code>pm2 start app.js --watch</code>：实时监控的方式启动，app.js文件有变动时，pm2会自动reload(重启)</li>
<li>  <code>pm2 start app.js -i max</code>：根据有效CPU数目启动最大进程数目</li>
<li>  <code>pm2 start app.js -i 3</code>：启动3个进程</li>
<li>  <code>pm2 start app.js --ignore-watch=&quot;test node_modules&quot;</code>:排除监听的目录/文件</li>
<li>  <code>pm2 start app.js --name mynode</code>：启动一个进程并把它命名为mynode</li>
<li>  <code>pm2 start app.json</code>：启动进程, 可以在 app.json里设置选项</li>
<li>  <code>pm2 start app.js -i max - -z 10</code>：在 – 之后给 app.js 传递参数（-z 10）</li>
</ul>
</blockquote>
<h3 id="查看与监视进程"><a href="#查看与监视进程" class="headerlink" title="查看与监视进程"></a>查看与监视进程</h3><ul>
<li>  <code>pm2 list</code>：显示所有进程信息；</li>
<li>  <code>pm2 show 11</code>，<code>pm2 info 11</code>：查看进程id为 11 的详细信息；</li>
<li>  <code>pm2 monit</code>：进入监视页面，监视每个node进程的CPU和内存的使用情况。</li>
</ul>
<h3 id="重载、重启"><a href="#重载、重启" class="headerlink" title="重载、重启"></a>重载、重启</h3><ul>
<li>  <code>pm2 restart 11</code>：重启id为 11 的进程；</li>
<li>  <code>pm2 restart all</code>：重启所有进程；</li>
<li>  <code>pm2 reload 11</code>：0秒停机重载id为 11 进程（用于 NETWORKED 进程）；</li>
<li>  <code>pm2 reload all</code>：重载所有进程；</li>
</ul>
<h3 id="停止、删除进程"><a href="#停止、删除进程" class="headerlink" title="停止、删除进程"></a>停止、删除进程</h3><ul>
<li>  <code>pm2 stop/delete 11</code>：停止/删除id为 11 的进程；</li>
<li>  <code>pm2 stop/delete all</code>：停止/删除所有进程；</li>
</ul>
<h3 id="日志操作"><a href="#日志操作" class="headerlink" title="日志操作"></a>日志操作</h3><ul>
<li>  <code>pm2 logs</code>：显示所有进程的日志；</li>
<li>  <code>pm2 logs 11</code>：显示进程id为 11 的日志；</li>
<li>  <code>pm2 flush</code>：清空所有日志文件；</li>
<li>  <code>pm2 reloadLogs</code>：重载所有日志；</li>
<li>  <code>pm2 startup</code>：产生 init 脚本，保持进程活着；</li>
</ul>
<h3 id="杀进程"><a href="#杀进程" class="headerlink" title="杀进程"></a>杀进程</h3><ul>
<li>  <code>pm2 kill</code>：杀死pm2进程 ;</li>
</ul>
<h3 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h3><p>1、通过<code>pm2 save</code>保存当前进程状态。<br>2、通过<code>pm2 startup [platform]</code>生成开机自启动的命令。例如：<code>pm2 startup centeros</code><br>3、将步骤2生成的命令，粘贴到控制台进行，搞定。</p>
<h2 id="pm2配置文件启动"><a href="#pm2配置文件启动" class="headerlink" title="pm2配置文件启动"></a>pm2配置文件启动</h2><p>在上面的启动命令例子中，有一条<code>pm2 start app.json</code>命令，可以在app.json文件中添加配置</p>
<p>apps:json结构，apps是一个数组，数组中的每一个对象就对应一个pm2中运行的应用</p>
<p><strong>参数说明：</strong></p>
<ul>
<li>  name:应用程序名称</li>
<li>  args:脚本的参数域</li>
<li>  cwd:应用程序所在的目录</li>
<li>  script:应用程序的脚本路径</li>
<li>  log_date_format:</li>
<li>  node_args:node 的参数域</li>
<li>  error_file:自定义应用程序的错误日志文件</li>
<li>  out_file:自定义应用程序日志文件</li>
<li>  pid_file:自定义应用程序的pid文件</li>
<li>  instances:</li>
<li>  min_uptime:最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</li>
<li>  max_restarts:设置应用程序异常退出重启的次数，默认15次（从0开始计数）</li>
<li>  cron_restart:定时启动，解决重启能解决的问题</li>
<li>  watch:是否启用监控模式，默认是false。如果设置成true，当应用程序变动时， pm2会自动重载。这里也可以设置你要监控的文件。</li>
<li>  merge_logs:</li>
<li>  exec_interpreter:应用程序的脚本类型，这里使用的shell，默认是nodejs</li>
<li>  exec_mode:应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</li>
<li>  autorestart:启用/禁用应用程序崩溃或退出时自动重启</li>
<li>  vizion:启用/禁用vizion特性(版本控制)</li>
</ul>
<p>举个例子：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;apps&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;serverName&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 名称</span><br>      <span class="hljs-attr">&quot;script&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;./index.js&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 入口文件</span><br>      <span class="hljs-attr">&quot;env&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 环境</span><br>        <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;development&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;env_production&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;NODE_ENV&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;production&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;instances&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 启用多少个实例</span><br>      <span class="hljs-attr">&quot;exec_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cluster&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span><br>      <span class="hljs-attr">&quot;max_restarts&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设置应用程序异常退出重启的次数，默认15次（从0开始计数）</span><br>      <span class="hljs-attr">&quot;restart_delay&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-number">5000</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 异常重启情况下，延时重启时间</span><br>      <span class="hljs-attr">&quot;log_date_format&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;YYYY-MM-DD HH:mm Z&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;combine_logs&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;log_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;yourpath&gt;/combined.outerr.log&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 日志目录</span><br>      <span class="hljs-attr">&quot;out_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;yourpath&gt;/out.log&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;error_file&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;yourpath&gt;/err.log&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>pm2 restart</code>命令不会重新进行 配置文件 需要关掉重启。</p>
</blockquote>
]]></content>
      <categories>
        <category>NodeJs</category>
      </categories>
      <tags>
        <tag>PM2</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Pyinstaller打包EXE</title>
    <url>/p/aa90cabc/</url>
    <content><![CDATA[<h4 id="安装-pyinstaller-库"><a href="#安装-pyinstaller-库" class="headerlink" title="安装 pyinstaller 库"></a>安装 pyinstaller 库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pip install pyinstaller<br></code></pre></td></tr></table></figure>

<h4 id="使用-pyinstaller-打包"><a href="#使用-pyinstaller-打包" class="headerlink" title="使用 pyinstaller 打包"></a>使用 pyinstaller 打包</h4><h5 id="选项参数"><a href="#选项参数" class="headerlink" title="选项参数"></a>选项参数</h5><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>选项</td>
<td>描述</td>
</tr>
<tr>
<td>-h，–help</td>
<td>显示帮助信息</td>
</tr>
<tr>
<td>-v，–version</td>
<td>显示版本号</td>
</tr>
<tr>
<td>–distpath DIR</td>
<td>指定打包后的程序存放目录，默认存放在当前目录下的dist目录</td>
</tr>
<tr>
<td>–workpath WORKPATH</td>
<td>为输出的所有临时文件指定存放目录</td>
</tr>
<tr>
<td>–clean</td>
<td>在构建之前，请清理PyInstaller缓存并删除临时文件</td>
</tr>
<tr>
<td>-D，–onedir</td>
<td>生成结果是一个包含exe程序的目录，所有第三方依赖库和其他资源和exe程序位于同一目录下</td>
</tr>
<tr>
<td>-F，–onefile</td>
<td>生成结果是一个exe程序，所有第三方依赖库和其他资源都被打包进该exe程序中—</td>
</tr>
<tr>
<td>–key</td>
<td>对打包进行加密处理</td>
</tr>
</tbody></table>
<h4 id="反编译Pyinstaller打包的exe"><a href="#反编译Pyinstaller打包的exe" class="headerlink" title="反编译Pyinstaller打包的exe"></a>反编译Pyinstaller打包的exe</h4><p>这样的exe已经可以被迁移到别的电脑上使用了，如果是为了方便其他电脑使用，到这一步就已经结束了。但有时候，我们可能是把这个功能给很多人用，但如果不想开源或者被别人破解，到这一步是还不够的。因为到这一步的exe是可以被别人反编译出源码的</p>
<h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><p>exe反编译工具：<a href="https://nchc.dl.sourceforge.net/project/pyinstallerextractor/dist/pyinstxtractor.py">pyinstxtractor.py</a></p>
<p>pyc反编译工具：Easy Python Decompiler 或者在线反编译pyc。</p>
<p>将pyinstxtractor.py放到exe文件相同目录，执行以下cmd命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">python pyinstxtractor.py main.exe<br></code></pre></td></tr></table></figure>

<h5 id="将脚本编译为pyd以防止反编译"><a href="#将脚本编译为pyd以防止反编译" class="headerlink" title="将脚本编译为pyd以防止反编译"></a>将脚本编译为pyd以防止反编译</h5><p>如何解决呢，可以考虑将模块py文件编译为动态链接库，这样破解难度将大大增加。其中，在python里，pyd格式即动态链接库。使用cython即可编译，如果是anaconda是自带，python有的可能不带cython，安装即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">pip install Cython<br></code></pre></td></tr></table></figure>

<p>我们在main.py所在的文件夹新建py文件，在此处我命名为build_pyd.py，其内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">from distutils.core import setup<br>from Cython.Build import cythonize<br> <br>setup(<br> name = <span class="hljs-string">&#x27;any words.....&#x27;</span>,<br> ext_modules = cythonize([<span class="hljs-string">&quot;mylib.py&quot;</span>,]<br> ),<br>)<br></code></pre></td></tr></table></figure>

<p>然后执行以下cmd命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">python build_pyd.py build_ext --inplace --compiler=msvc<br></code></pre></td></tr></table></figure>

<p><img src="https://secure2.wostatic.cn/static/gpJ7WDs1PzZPVYgLW4afh6/1.png?auth_key=1666849858-w5TSXGW7NH7pFjvMVgjDsD-0-f9ef744989c530f45774ba22b25028cb"></p>
<p>此时就会多出一个pyd后缀文件，修改文件名，然后我们删除build、disk文件夹，重复步骤二，再次编译为exe即可。</p>
<h4 id="错误问题"><a href="#错误问题" class="headerlink" title="错误问题"></a>错误问题</h4><h5 id="执行出现-unable-to-find-vcvarsall-bat"><a href="#执行出现-unable-to-find-vcvarsall-bat" class="headerlink" title="执行出现 unable to find vcvarsall.bat"></a>执行出现 unable to find vcvarsall.bat</h5><blockquote>
<p>安装Visual C++ Build Tools 2015/2017 即可 <a href="http://go.microsoft.com/fwlink/?LinkId=691126">下载地址</a></p>
</blockquote>
<h5 id="打包出现问题"><a href="#打包出现问题" class="headerlink" title="打包出现问题"></a>打包出现问题</h5><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment">#升级pip</span><br>python -m pip install --upgrade pip<br><br><span class="hljs-comment"># 重新安装</span><br>pip install pyinstaller<br><br></code></pre></td></tr></table></figure>



<h5 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h5><p><a href="https://www.jb51.net/article/184725.htm">https://www.jb51.net/article/184725.htm</a></p>
<p><a href="https://blog.csdn.net/u013451076/article/details/105815788">https://blog.csdn.net/u013451076/article/details/105815788</a></p>
<p><a href="https://www.jb51.net/article/184725.htm">https://www.jb51.net/article/184725.htm</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>python安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Python安包报错ERROR:Could not find+a+version……解决方法</title>
    <url>/p/cb58a7d0/</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash">ERROR: Could not find a version that satisfies the requirement tensorflow==2.0.0 (from versions: none)<br></code></pre></td></tr></table></figure>

<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs Bash"><span class="hljs-comment"># 不止要选择pip源，还要信任它的来源，只完成第一步是不可以的喽</span><br>pip install fonttools -i http://pypi.douban.com/simple/ --trusted-host<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行下windows防火墙操作</title>
    <url>/p/a60073f6/</url>
    <content><![CDATA[<h4 id="设置防火墙服务为自动"><a href="#设置防火墙服务为自动" class="headerlink" title="设置防火墙服务为自动"></a>设置防火墙服务为自动</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">sc config sharedaccess <span class="hljs-built_in">start</span>=auto<br></code></pre></td></tr></table></figure>

<h4 id="开启防火墙服务"><a href="#开启防火墙服务" class="headerlink" title="开启防火墙服务"></a>开启防火墙服务</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">net</span> <span class="hljs-built_in">start</span> sharedaccess<br></code></pre></td></tr></table></figure>


<h4 id="开启端口"><a href="#开启端口" class="headerlink" title="开启端口"></a>开启端口</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">netsh advfirewall firewall add rule name=&quot;mysql&quot; <span class="hljs-built_in">dir</span>=<span class="hljs-keyword">in</span> protocol=tcp localport=<span class="hljs-number">3306</span> action=allow<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>window</category>
      </categories>
      <tags>
        <tag>防火墙</tag>
      </tags>
  </entry>
  <entry>
    <title>网址记录</title>
    <url>/p/78db8bbb/</url>
    <content><![CDATA[<h4 id="图片工具"><a href="#图片工具" class="headerlink" title="图片工具"></a>图片工具</h4><p><a href="https://www.jianshu.com/p/5b0cd08fadf1">不错的配图网址</a><br><a href="https://www.liulinblog.com/47979.html">好用的配图网址</a><br><a href="https://www.iloveimg.com/zh-cn">图片压缩网址</a></p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
